{
  
    
        "post0": {
            "title": "CollegeBoard Quiz Proof",
            "content": ". .",
            "url": "https://jagermi3ster.github.io/The-Pentagon/2022/10/03/Collegeboard.html",
            "relUrl": "/2022/10/03/Collegeboard.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Framework",
            "content": ".",
            "url": "https://jagermi3ster.github.io/The-Pentagon/2022/10/01/Collegeboard.html",
            "relUrl": "/2022/10/01/Collegeboard.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": " the watchers",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# &quot;Work Watch&quot; n”, “&gt; &quot;What is the ‘Work Watch’ &quot; n”, “- toc: true n”, “- branch: master n”, “- badges: true n”, “- comments: true n”, “- author: Jagger Klein n”, “- categories: [fastpages, jupyter]” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## What is the &quot;Work Watch n”, “ n”, “The &quot;Work Watch&quot; is a customizable timer program which helps you balance your work and stress. Often, it feels as if you’re stuck toiling away at assignments, watching as the clock ticks later and later while you hardly seem to make any progress. As a 2011 study proved, working for long periods of time without breaks can hinder your ability to output high-quality work. For students especially, as Laurie Santos covered in her speech &quot;Psychology and the Good Life,&quot; many feel that they do not have time to spend time doing things that actually supplement their learning like reading and exercising. During scheduled break time, students can spend time on these ideal activities while actively improving their output. The &quot;Work Watch&quot; helps you by telling you when to take these breaks, suggesting what you do during these breaks, and isolating the user from the ticking timer to promote focus on the tasks at hand.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# What will be included in work watch? n”, “ n”, “-Work watch will have customizable updates that give sound for how long the timer has left n”, “- Obviously you will be able to set the time n”, “- Possible rewards for using the timer n”, “-Being able to make the timer visable or not n”, “-Being able to title your timers with the task you have at hand” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Who is making &quot;Work Watch&quot;? n”, “We’re called &quot;The Watchers&quot;…because we’re making &quot;Work Watch&quot;. This is a team made up of Drew Reed, Devon Shepherd, Trent Cardall and Jagger Klein. “ ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.10.6 64-bit”, “language”: “python”, “name”: “python3” }, “language_info”: { “name”: “python”, “version”: “3.10.6” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://jagermi3ster.github.io/The-Pentagon/2022/09/29/The-Watchers.html",
            "relUrl": "/2022/09/29/The-Watchers.html",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Javascrpt Building a Function",
            "content": "Here I use a simple console.log command which is similar to a print command in python . console.log(&quot;hello&quot;) . hello . The code below shows a string that logs a # which is 2022, and the objects in a list. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;testing out javascript&quot;) logItType(&quot;String test&quot;); // String logItType(2022); // Number logItType([5, 6, 7]); // Object is generic for this Array, which similar to Python List . testing out javascript string ; String test number ; 2022 object ; [ 5, 6, 7 ] . Here I amde a function for the people that have names and the class they graduate. Later converting them in JSON. . // define a function to hold data for a Person function Person(name,classOf) { this.name = name; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable coach var coach = new Person(&quot;Kenji&quot;, 1970); // object type is easy to work with in JavaScript logItType(coach); // before role logItType(coach.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Coach coach.setRole(&quot;Coach&quot;); // set the role logItType(coach); logItType(coach.toJSON()); . object ; Person { name: &#39;Kenji&#39;, classOf: 1970, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Kenji&#34;,&#34;classOf&#34;:1970,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Kenji&#39;, classOf: 1970, role: &#39;Coach&#39; } string ; {&#34;name&#34;:&#34;Kenji&#34;,&#34;classOf&#34;:1970,&#34;role&#34;:&#34;Coach&#34;} . Here I defined the players/coach and made a team function. . // define a student Array of Person(s) var players = [ new Person(&quot;Jagger&quot;, 2023), new Person(&quot;Matthew&quot;, 2023), new Person(&quot;Gavin&quot;, 2024), ]; // define a team and build Team objects and json function Team(coach, players){ // 1 coach, many student // start Team with Coach coach.setRole(&quot;Coach&quot;); this.coach = coach; this.team = [coach]; // add each Student to Team this.players = players; this.players.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.team.push(student); }); // build json/string format of Team this.json = []; this.team.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci team from formerly defined coach and players compsci = new Team(coach, players); // output of Objects and JSON in CompSci team logItType(compsci.team); // constructed team object logItType(compsci.team[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Kenji&#39;, classOf: 1970, role: &#39;Coach&#39; }, Person { name: &#39;Jagger&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Matthew&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Gavin&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Kenji string ; {&#34;name&#34;:&#34;Kenji&#34;,&#34;classOf&#34;:1970,&#34;role&#34;:&#34;Coach&#34;} object ; { name: &#39;Kenji&#39;, classOf: 1970, role: &#39;Coach&#39; } . Here I converted the json into HTMl and made a table out of that . // define an HTML conversion &quot;method&quot; associated with Team Team.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.team for (var row of compsci.team) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameClass OfRole . Kenji | 1970 | Coach | Jagger | 2023 | Student | Matthew | 2023 | Student | Gavin | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://jagermi3ster.github.io/The-Pentagon/2022/09/23/js_info.html",
            "relUrl": "/2022/09/23/js_info.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Javascript Quiz",
            "content": "Planning Process . Ideas for Quiz -Multisport quiz trivia questions -Baseball question Video game questions . Questions for quiz . What is the most popular sport in the U.S? A.Football . B.Soccer . C.Baseball . D.Hockey . Correct answer: Football . | What team in Football has won the most superbowls? A.Chargers . B.Cowboys . C.Colts . D.Patriots . Correct Anwser: Patriots . | Which of these sports are not in the olympics? A.Basketball B.Baseball C.Football D.Soccer . Correct anwser: Football . | How many Olympic Medals has Micheal Phelps won? A.8 B.42 C.5 D.28 . ### Troubles of Making the Quiz . -Trying to make the button pop up on question #2 and 3 . -Trying to add a score at the end of the quiz . -Making a different concept for each question . -Making a wrong button pop up on question #4 . -Making an option on question #3 to choose option 1 first . On #2 pressing the button even if you got it incorrect will advance you to #3 | . |",
            "url": "https://jagermi3ster.github.io/The-Pentagon/2022/09/07/Javascript-Quiz-Blog.html",
            "relUrl": "/2022/09/07/Javascript-Quiz-Blog.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "My Workout Split",
            "content": "My workout Split . Workout Split Monday Tuesday Wenesday Thursday Friday Saturday Sunday . Type | Push 1 | Pull 1 | Legs 1 | Push 2 | Pull 2 | Legs 2 | Rest | .",
            "url": "https://jagermi3ster.github.io/The-Pentagon/2022/09/04/Table-using-Markdown.html",
            "relUrl": "/2022/09/04/Table-using-Markdown.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Bash Code Guide",
            "content": "Basic Code for Bash for Beginners . The Key Commands Everyone should know . Clear This key will get rid of all the junk you have already typed into your terminal/shell . Cd will put you into a directory/repo of your choice . ` –version` will tell you the version of something you are using like python . Conda List Will allow you to see which Conda versions you have downloaded and the one you are currently using. .",
            "url": "https://jagermi3ster.github.io/The-Pentagon/markdown/2022/08/29/Bash-Code-Guide.html",
            "relUrl": "/markdown/2022/08/29/Bash-Code-Guide.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "What I learned in Economics this week.",
            "content": "What I learned in Economics this week 8/21-8/26 . . Overview on what I learned so far . The main thing we talked about this week was how to set up IRA’s. We talked about Roth vs Traditional and when to use either or. : . ROTH IRA’S . What is a ROTH IRA: In this type of investment account you are taxed when you contribute money into this account, you aren’t taxed when you take it out unlike a traditional fund. . . Other things we learned . Here’s a list: . Financial plans | How to budget | Why you should invest early | .",
            "url": "https://jagermi3ster.github.io/The-Pentagon/markdown/2022/08/28/Economics-Blog.html",
            "relUrl": "/markdown/2022/08/28/Economics-Blog.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Notebook",
            "content": "print (&quot;hello&quot;) .",
            "url": "https://jagermi3ster.github.io/The-Pentagon/fastpages/jupyter/2022/08/22/Notebook-1.html",
            "relUrl": "/fastpages/jupyter/2022/08/22/Notebook-1.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Infodb and Lists",
            "content": "Here I start to list a dictionary that assigns keys according to a word. So for example my first key is First Name and the value is Jagger. To print out the list I used the function print (infodb) . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Jagger&quot;, &quot;LastName&quot;: &quot;Klein&quot;, &quot;DOB&quot;: &quot;September 18 2204&quot;, &quot;Residence&quot;: &quot;Residence&quot;, &quot;Email&quot;: &quot;jagger.klein@icloud.com&quot;, &quot;Owns_Cars&quot;: [&quot;2020-Mazda3&quot;, &quot;2022-Ferrari&quot;, &quot;2003-Hyundai&quot;, &quot;2016-Audi A3&quot;, &quot;1969-Volvo&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Jagger&#39;, &#39;LastName&#39;: &#39;Klein&#39;, &#39;DOB&#39;: &#39;September 18 2204&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jagger.klein@icloud.com&#39;, &#39;Owns_Cars&#39;: [&#39;2020-Mazda3&#39;, &#39;2022-Ferrari&#39;, &#39;2003-Hyundai&#39;, &#39;2016-Audi A3&#39;, &#39;1969-Volvo&#39;]}] . Below I output the loop data by using the function print_data. But to use this you need a parameter that defines the data d_rec. The function of actually making the list is for_loop, to activate the data. . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Jagger Klein Residence: San Diego Birth Day: September 18 2204 Cars: 2020-Mazda3, 2022-Ferrari, 2003-Hyundai, 2016-Audi A3, 1969-Volvo . While_Loop generally does the same thing as above but recursive loop activates the function untill it fails. . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Jagger Klein Residence: San Diego Birth Day: September 18 2204 Cars: 2020-Mazda3, 2022-Ferrari, 2003-Hyundai, 2016-Audi A3, 1969-Volvo . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Jagger Klein Residence: San Diego Birth Day: September 18 2204 Cars: 2020-Mazda3, 2022-Ferrari, 2003-Hyundai, 2016-Audi A3, 1969-Volvo .",
            "url": "https://jagermi3ster.github.io/The-Pentagon/fastpages/jupyter/2022/08/20/infodb.html",
            "relUrl": "/fastpages/jupyter/2022/08/20/infodb.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Quiz Using Python",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) rsp = question_with_response(&quot;Is this the first question on the test?&quot;) if rsp == &quot;yes&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Is this test hard so far?&quot;) if rsp == &quot;no&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Is this the best quiz you have taken in your entire life?&quot;) if rsp == &quot;yes&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, jaggerklein running /usr/local/opt/python@3.10/bin/python3.10 You will be asked 3 questions. Question: Is this the first question on the test? yes is correct! Question: Is this test hard so far? no is correct! Question: Is this the best quiz you have taken in your entire life? yes is correct! jaggerklein you scored 3/3 .",
            "url": "https://jagermi3ster.github.io/The-Pentagon/fastpages/jupyter/2020/08/26/Quiz.html",
            "relUrl": "/fastpages/jupyter/2020/08/26/Quiz.html",
            "date": " • Aug 26, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "My 1st Post in Comp Sci",
            "content": "My First Post . Just testing out my first post . Why this is important : This is important because this sets the tone for the rest of the tri. . What I hope to learn this year . I just hope to learn how to make a website and fully customize it to how I want and maybe how to code a game. .",
            "url": "https://jagermi3ster.github.io/The-Pentagon/2020/08/22/1st-Post.html",
            "relUrl": "/2020/08/22/1st-Post.html",
            "date": " • Aug 22, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jagermi3ster.github.io/The-Pentagon/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jagermi3ster.github.io/The-Pentagon/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by Jagger Klein 1. . a My first website!. &#8617; . |",
          "url": "https://jagermi3ster.github.io/The-Pentagon/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": "Objectives . . Welcome to my page! Click here if you wish to learn more about me. Hopefully you enjoy your stay on my site! . . Blogs .",
          "url": "https://jagermi3ster.github.io/The-Pentagon/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Link to Javascript",
          "content": "https://jagermi3ster.github.io/The-Pentagon/2022/09/23/js_info.html .",
          "url": "https://jagermi3ster.github.io/The-Pentagon/_pages/javascript.html",
          "relUrl": "/_pages/javascript.html",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jagermi3ster.github.io/The-Pentagon/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}